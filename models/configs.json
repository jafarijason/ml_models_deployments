{
    "0001_test": {
        "name": "0001_test",
        "description": "predict Wage based on Education with linear regression",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Education",
                "type": "int"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        }
    },
    "educationWageLiniarRgressionModelFit": {
        "name": "educationWageLiniarRgressionModelFit",
        "description": "predict Wage based on Education with linear regression",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Education",
                "type": "int"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "earningOthersOlsModelFit1": {
        "name": "earningOthersOlsModelFit1",
        "description": "predict Earnings based on Cost",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Cost",
                "type": "float"
            }
        ],
        "output": {
            "name": "Earnings",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "earningOthersOlsModelFit2": {
        "name": "earningOthersOlsModelFit2",
        "description": "predict Earnings based on Cost and Grad",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Cost",
                "type": "float"
            },
            {
                "name": "Grad",
                "type": "int"
            }
        ],
        "output": {
            "name": "Earnings",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "earningOthersOlsModelFit3": {
        "name": "earningOthersOlsModelFit3",
        "description": "predict Earnings based on Cost, Grad and Debt",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Cost",
                "type": "float"
            },
            {
                "name": "Grad",
                "type": "int"
            },
            {
                "name": "Debt",
                "type": "int"
            }
        ],
        "output": {
            "name": "Earnings",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "modelPredictSaleByTemperatureAdvertisingDiscountFit": {
        "name": "modelPredictSaleByTemperatureAdvertisingDiscountFit",
        "description": "Predict Sales based on Temperature Advertising Discount for mowersDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Temperature",
                "type": "int"
            },
            {
                "name": "Advertising",
                "type": "int"
            },
            {
                "name": "Discount",
                "type": "float"
            }
        ],
        "output": {
            "name": "Sales",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "modelPredictSaleByAdvertisingFit": {
        "name": "modelPredictSaleByAdvertisingFit",
        "description": "Predict Sales based on Advertising for mowersDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Advertising",
                "type": "int"
            }
        ],
        "output": {
            "name": "Sales",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "salaryBasedOnGpaMisStatisticsFit": {
        "name": "salaryBasedOnGpaMisStatisticsFit",
        "description": "Predict Salary based on GPA MIS Statistics for sallaryMisDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "GPA",
                "type": "float"
            },
            {
                "name": "MIS",
                "type": "binary"
            },
            {
                "name": "Statistics",
                "type": "binary"
            }
        ],
        "output": {
            "name": "Salary",
            "type": "int"
        },
        "modelType": "sm.OLS"
    },
    "salaryBasedOnGpaMisStatistics_Transfoms_misXStatisticsFit": {
        "name": "salaryBasedOnGpaMisStatistics_Transfoms_misXStatisticsFit",
        "description": "Predict Salary based on GPA MIS Statistics and interaction MIS * Statistics for sallaryMisDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "GPA",
                "type": "float"
            },
            {
                "name": "MIS",
                "type": "binary"
            },
            {
                "name": "Statistics",
                "type": "binary"
            }
        ],
        "transformers": [
            {
                "name": "misXStatistics",
                "transformer": "MIS_X_Statistics"
            }
        ],
        "output": {
            "name": "Salary",
            "type": "int"
        },
        "modelType": "sm.OLS"
    },
    "salaryBasedOnGpaMisStatistics_Transfoms_misXGpaFit": {
        "name": "salaryBasedOnGpaMisStatistics_Transfoms_misXGpaFit",
        "description": "Predict Salary based on GPA MIS Statistics and interaction misXGpa for sallaryMisDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "GPA",
                "type": "float"
            },
            {
                "name": "MIS",
                "type": "binary"
            },
            {
                "name": "Statistics",
                "type": "binary"
            }
        ],
        "transformers": [
            {
                "name": "misXGpa",
                "transformer": "MIS_X_GPA"
            }
        ],
        "output": {
            "name": "Salary",
            "type": "int"
        },
        "modelType": "sm.OLS"
    },
    "salaryBasedOnGpaMisStatistics_Transfoms_statisticsXGpaFit": {
        "name": "salaryBasedOnGpaMisStatistics_Transfoms_statisticsXGpaFit",
        "description": "Predict Salary based on GPA MIS Statistics and interaction misXGpa for statisticsXGpa",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "GPA",
                "type": "float"
            },
            {
                "name": "MIS",
                "type": "binary"
            },
            {
                "name": "Statistics",
                "type": "binary"
            }
        ],
        "transformers": [
            {
                "name": "statisticsXGpa",
                "transformer": "GPA_X_Statistics"
            }
        ],
        "output": {
            "name": "Salary",
            "type": "int"
        },
        "modelType": "sm.OLS"
    },
    "salaryBasedOnGpaMisStatistics_Transfoms_misXStatistics_misXGpa_statisticsXGpaFit": {
        "name": "salaryBasedOnGpaMisStatistics_Transfoms_misXStatistics_misXGpa_statisticsXGpaFit",
        "description": "Predict Salary based on GPA MIS Statistics and interaction misXStatistics, misXGpa, statisticsXGpa",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "GPA",
                "type": "float"
            },
            {
                "name": "MIS",
                "type": "binary"
            },
            {
                "name": "Statistics",
                "type": "binary"
            }
        ],
        "transformers": [
            {
                "name": "misXStatistics",
                "transformer": "MIS_X_Statistics"
            },
            {
                "name": "misXGpa",
                "transformer": "MIS_X_GPA"
            },
            {
                "name": "statisticsXGpa",
                "transformer": "GPA_X_Statistics"
            }
        ],
        "output": {
            "name": "Salary",
            "type": "int"
        },
        "modelType": "sm.OLS"
    },
    "wageEduModelFit": {
        "name": "wageEduModelFit",
        "description": "Predict Wage based on Educ for wagesDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Educ",
                "type": "float"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "wageAgeModelFit": {
        "name": "wageAgeModelFit",
        "description": "Predict Wage based on Age for wagesDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Age",
                "type": "float"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "wageAgePower2ModelFit": {
        "name": "wageAgePower2ModelFit",
        "description": "Predict Wage based on Age quadradic for wagesDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Age",
                "type": "float"
            }
        ],
        "transformers": [
            {
                "name": "agePower2",
                "transformer": "AGE_POWER_2"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "wageAgeEduModel1": {
        "name": "wageAgeEduModel1",
        "description": "Predict Wage based on Age and Educ for wagesDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Age",
                "type": "float"
            },
            {
                "name": "Educ",
                "type": "float"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "wageAgePower2EducModelFit": {
        "name": "wageAgePower2EducModelFit",
        "description": "Predict Wage based on Age quadradic and Educ for wagesDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Age",
                "type": "float"
            },
            {
                "name": "Educ",
                "type": "float"
            }
        ],
        "transformers": [
            {
                "name": "agePower2",
                "transformer": "AGE_POWER_2"
            }
        ],
        "output": {
            "name": "Wage",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "rentSqftModel1": {
        "name": "rentSqftModel1",
        "description": "Predict Rent based on Sqft for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "output": {
            "name": "Rent",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "rentBedsBathsSqftModel": {
        "name": "rentBedsBathsSqftModel",
        "description": "Predict Rent based on Beds,Baths,Sqft for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Beds",
                "type": "int"
            },
            {
                "name": "Baths",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "output": {
            "name": "Rent",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "rentBedsBathsSqftModelFit": {
        "name": "rentBedsBathsSqftModelFit",
        "description": "Predict Rent based on Beds,Baths,Sqft for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Beds",
                "type": "int"
            },
            {
                "name": "Baths",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "output": {
            "name": "Rent",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "rentBedsBathsLogSqftModelFit": {
        "name": "rentBedsBathsLogSqftModelFit",
        "description": "Predict Rent based on Beds,Baths,log(Sqft) for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Beds",
                "type": "int"
            },
            {
                "name": "Baths",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "transformers": [
            {
                "name": "log(Sqft)",
                "transformer": "Sqft_log"
            }
        ],
        "output": {
            "name": "Rent",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "rentSqftModel1Fit": {
        "name": "rentSqftModel1Fit",
        "description": "Predict Rent based on Sqft for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "output": {
            "name": "Rent",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "logRentBedsBathsLogSqftModelFit": {
        "name": "logRentBedsBathsLogSqftModelFit",
        "description": "Predict log(Rent) based on Beds,Baths,log(Sqft) for annArborDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "Beds",
                "type": "int"
            },
            {
                "name": "Baths",
                "type": "int"
            },
            {
                "name": "Sqft",
                "type": "float"
            }
        ],
        "transformers": [
            {
                "name": "log(Sqft)",
                "transformer": "Sqft_log"
            }
        ],
        "output": {
            "name": "log(Rent)",
            "type": "float"
        },
        "modelType": "sm.OLS"
    },
    "logisticRegYFromX1AndX2Model": {
        "name": "logisticRegYFromX1AndX2Model",
        "description": "Predict Logistic Regression Y based on x1,x2 for mortgageDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "x1",
                "type": "float"
            },
            {
                "name": "x2",
                "type": "float"
            }
        ],
        "output": {
            "name": "y",
            "type": "float"
        },
        "modelType": "sm.Logit"
    },
    "logisticRegYFromX1AndX2ModelFit": {
        "name": "logisticRegYFromX1AndX2ModelFit",
        "description": "Predict Logistic Regression Y based on x1,x2 for mortgageDf",
        "inputs": [
            {
                "name": "const",
                "type": "int"
            },
            {
                "name": "x1",
                "type": "float"
            },
            {
                "name": "x2",
                "type": "float"
            }
        ],
        "output": {
            "name": "y",
            "type": "float"
        },
        "modelType": "sm.Logit"
    }
}